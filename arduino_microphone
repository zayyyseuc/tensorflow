// I²S数字音频接收代码详解

/* 头文件包含 */
#include <Arduino.h>   // Arduino核心库
#include <Wire.h>      // I2C通信库（本代码未实际使用）

/* 硬件引脚定义 */
#define LRCLK_PIN 9    // 左右声道时钟（WS），决定当前是左/右声道
#define BCLK_PIN 10    // 位时钟（BCK），数据位的同步时钟
#define DATA_PIN 11    // 串行数据输入引脚

/* 全局变量 */
volatile int16_t audioSample = 0; // 存储当前音频样本（16位有符号）
volatile int bitCounter = 0;      // 当前已读取的位数计数器
volatile bool isLeftChannel = true; // 声道标志（true=左声道）

/* 初始化设置 */
void setup() {
  Serial.begin(115200); // 初始化串口通信，波特率115200
  
  // 配置引脚模式
  pinMode(LRCLK_PIN, OUTPUT);  // LRCLK设为输出
  pinMode(BCLK_PIN, OUTPUT);   // BCLK设为输出
  pinMode(DATA_PIN, INPUT);    // DATA设为输入

  // 初始化LRCLK为低电平，表示左声道数据开始
  digitalWrite(LRCLK_PIN, LOW); 
}

/* 主循环 */
void loop() {
  // 生成BCLK时钟信号（约1MHz，每个loop周期产生64个BCLK脉冲）
  for(int i=0; i<64; i++){ // 每个音频样本周期包含64个BCLK周期
    // 生成BCLK的上升沿
    digitalWrite(BCLK_PIN, HIGH);
    delayMicroseconds(1);  // 调整时钟频率（实际可能不准）
    readBit();             // 在上升沿读取数据位
    
    // 生成BCLK的下降沿
    digitalWrite(BCLK_PIN, LOW);
    delayMicroseconds(1);
    readBit();             // 理论上应在上升沿采样，此处可能冗余
  }
  
  // 切换LRCLK（左右声道交替）
  digitalWrite(LRCLK_PIN, isLeftChannel ? HIGH : LOW);
  isLeftChannel = !isLeftChannel; // 翻转声道标志
  // 产生约8kHz采样率（64位×2声道×8kHz=1.024MHz BCLK）
}

/* 位读取函数 */
void readBit() {
  static bool lastBclk = false; // 存储上一个BCLK状态
  bool currentBclk = digitalRead(BCLK_PIN); // 读取当前BCLK状态

  // 检测上升沿（低→高跳变）
  if(currentBclk && !lastBclk) {
    // 读取数据位（MSB优先）
    int data = digitalRead(DATA_PIN);
    
    // 左移并拼接数据位（24位I²S格式）
    audioSample = (audioSample << 1) | data;
    bitCounter++; // 位计数器递增

    // 当读取满24位时处理数据
    if(bitCounter == 24) {
      // 24位转16位：丢弃低8位（根据具体DAC配置可能需要调整）
      int16_t sample16 = (int16_t)(audioSample >> 8);
      
      // 通过串口发送小端格式（低字节在前）
      Serial.write((uint8_t)(sample16 & 0xFF));     // 低字节
      Serial.write((uint8_t)((sample16 >> 8) & 0xFF)); // 高字节
      
      // 重置状态
      audioSample = 0;
      bitCounter = 0;
    }
  }
  lastBclk = currentBclk; // 更新BCLK状态
}
